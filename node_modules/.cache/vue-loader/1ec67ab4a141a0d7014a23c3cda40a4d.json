{"remainingRequest":"/home/dls/Workspace/VcA/Pool2/canal-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dls/Workspace/VcA/Pool2/canal-frontend/src/components/mattermost/StepTwo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dls/Workspace/VcA/Pool2/canal-frontend/src/components/mattermost/StepTwo.vue","mtime":1574699517248},{"path":"/home/dls/Workspace/VcA/Pool2/canal-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dls/Workspace/VcA/Pool2/canal-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dls/Workspace/VcA/Pool2/canal-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dls/Workspace/VcA/Pool2/canal-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//import { VuePassword } from 'vue-password'\nimport axios from 'axios'\nexport default {\n  name: 'StepTwo',\n  components: {\n    },\n  data () {\n    // RegEx\tDescription\n    // ^\tThe password string will start this way\n    // (?=.*[a-z])\tThe string must contain at least 1 lowercase alphabetical character\n    // (?=.*[A-Z])\tThe string must contain at least 1 uppercase alphabetical character\n    // (?=.*[0-9])\tThe string must contain at least 1 numeric character\n    // (?=.[!@#\\$%\\^&])\tThe string must contain at least one special character, but we are escaping reserved RegEx characters to avoid conflict\n    // (?=.{8,})\tThe string must be eight characters or longer\n    //  const RegExp = (\"^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{10,})\");\n\n    var validatePassOne = (rule, passwordOne, callback) => {\n      if (passwordOne === '') {\n        callback(new Error( this.$i18n.t('components.stepTwo.rules.inputPasswordOne') ));\n      } else {\n        if (passwordOne !== '') {\n          this.$refs.passwords.validateField('passwords');\n        }\n        callback();\n      }\n    };\n    var validatePassTwo = (rule, passwordTwo, callback) => {\n      if (passwordTwo === '') {\n        callback(new Error( this.$i18n.t('components.stepTwo.rules.inputPasswordTwo') ));\n      } else if (passwordTwo !== this.passwords.passwordOne) {\n        callback(new Error( this.$i18n.t('components.stepTwo.rules.inputMismatched') ));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      passwords: {\n        passwordOne: '',\n        passwordTwo: '',\n        dsgvo: false,\n      },\n      rules: {\n        passwordOne: [\n          { required: true, pattern:/^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{10,})/ ,message: this.$i18n.t('components.stepTwo.rules.inputPattern'), trigger: 'blur' },\n          { validator: validatePassOne, trigger: 'blur'}\n        ],\n        passwordTwo: [\n          { required: true },\n          { validator: validatePassTwo, trigger: 'blur'}\n        ],\n        dsgvo: [\n          { required: true, message: this.$i18n.t('components.stepTwo.rules.readDSGVO'), trigger: 'change'}\n        ]\n      }\n    }\n  },\n  methods: {\n    prev() {\n      this.$emit('prev')\n    },\n    submitForm() {\n      this.$refs.passwords.validate((valid) => {\n        if (valid && this.checked == true) {\n          axios\n            .post('/backend/canal/mattermost/user', { 'password': this.passwords.passwordOne })\n            .then(() => {\n                  this.$emit('next')\n            })\n            .catch(function (error) {\n            switch (error.response.status) {\n              case 400:\n                this.$emit('exist');\n                break;\n            }\n          })\n        }\n      });\n    },\n  }\n}\n",{"version":3,"sources":["StepTwo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StepTwo.vue","sourceRoot":"src/components/mattermost","sourcesContent":["<template>\n        <el-form :model=\"passwords\" :rules=\"rules\"  ref=\"passwords\" :label-position=\"'top'\" label-width=\"120px\">\n        <p>\n          {{ $i18n.t('components.stepTwo.whyCanal') }}\n        </p>\n        <p>\n          {{ $i18n.t('components.stepTwo.newPassword') }}\n        </p>\n\n        <el-form-item :label=\"$i18n.t('elements.label.password')\">\n          <el-input v-model=\"passwords.passwordOne\" :placeholder=\"$i18n.t('elements.placeholder.password')\" show-password></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$i18n.t('elements.label.checkPassword')\">\n          <el-input v-model=\"passwords.passwordTwo\" :placeholder=\"$i18n.t('elements.placeholder.checkPassword')\" show-password></el-input>\n        </el-form-item>\n        <el-form-item :label=\"$i18n.t('elements.label.dsgvo')\">\n          <el-checkbox v-model=\"passwords.dsgvo\">{{ $i18n.t('elements.checkBoxs.dsgvo') }}<a href=\"https://www.vivaconagua.org/datenschutzerklaerung\">DSGVO</a></el-checkbox>\n        </el-form-item>\n        <el-button-group style=\"margin: 12px;float: right;\" >\n          <el-button @click=\"prev\" icon=\"el-icon-arrow-left\" type=\"secondary\">{{ $i18n.t('elements.buttons.back') }}</el-button>\n          <el-button @click=\"submitForm\" type=\"primary\">{{ $i18n.t('elements.buttons.next') }}<i class=\"el-icon-arrow-right \"></i></el-button>\n        </el-button-group>\n      </el-form>\n</template>\n<script>\n//import { VuePassword } from 'vue-password'\nimport axios from 'axios'\nexport default {\n  name: 'StepTwo',\n  components: {\n    },\n  data () {\n    // RegEx\tDescription\n    // ^\tThe password string will start this way\n    // (?=.*[a-z])\tThe string must contain at least 1 lowercase alphabetical character\n    // (?=.*[A-Z])\tThe string must contain at least 1 uppercase alphabetical character\n    // (?=.*[0-9])\tThe string must contain at least 1 numeric character\n    // (?=.[!@#\\$%\\^&])\tThe string must contain at least one special character, but we are escaping reserved RegEx characters to avoid conflict\n    // (?=.{8,})\tThe string must be eight characters or longer\n    //  const RegExp = (\"^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{10,})\");\n\n    var validatePassOne = (rule, passwordOne, callback) => {\n      if (passwordOne === '') {\n        callback(new Error( this.$i18n.t('components.stepTwo.rules.inputPasswordOne') ));\n      } else {\n        if (passwordOne !== '') {\n          this.$refs.passwords.validateField('passwords');\n        }\n        callback();\n      }\n    };\n    var validatePassTwo = (rule, passwordTwo, callback) => {\n      if (passwordTwo === '') {\n        callback(new Error( this.$i18n.t('components.stepTwo.rules.inputPasswordTwo') ));\n      } else if (passwordTwo !== this.passwords.passwordOne) {\n        callback(new Error( this.$i18n.t('components.stepTwo.rules.inputMismatched') ));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      passwords: {\n        passwordOne: '',\n        passwordTwo: '',\n        dsgvo: false,\n      },\n      rules: {\n        passwordOne: [\n          { required: true, pattern:/^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{10,})/ ,message: this.$i18n.t('components.stepTwo.rules.inputPattern'), trigger: 'blur' },\n          { validator: validatePassOne, trigger: 'blur'}\n        ],\n        passwordTwo: [\n          { required: true },\n          { validator: validatePassTwo, trigger: 'blur'}\n        ],\n        dsgvo: [\n          { required: true, message: this.$i18n.t('components.stepTwo.rules.readDSGVO'), trigger: 'change'}\n        ]\n      }\n    }\n  },\n  methods: {\n    prev() {\n      this.$emit('prev')\n    },\n    submitForm() {\n      this.$refs.passwords.validate((valid) => {\n        if (valid && this.checked == true) {\n          axios\n            .post('/backend/canal/mattermost/user', { 'password': this.passwords.passwordOne })\n            .then(() => {\n                  this.$emit('next')\n            })\n            .catch(function (error) {\n            switch (error.response.status) {\n              case 400:\n                this.$emit('exist');\n                break;\n            }\n          })\n        }\n      });\n    },\n  }\n}\n</script>\n"]}]}